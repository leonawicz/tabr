% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/midi.R
\name{midily}
\alias{midily}
\title{Convert MIDI to LilyPond file}
\usage{
midily(
  midi_file,
  file,
  key = "c",
  absolute = FALSE,
  quantize = NULL,
  explicit = FALSE,
  start_quant = NULL,
  allow_tuplet = c("4*2/3", "8*2/3", "16*2/3"),
  details = FALSE,
  lyric = FALSE
)
}
\arguments{
\item{midi_file}{character, MIDI file (\code{.mid}). May include an absolute or
relative path.}

\item{file}{LilyPond output file ending in \code{.ly}.}

\item{key}{key signature, defaults to \code{"c"}.}

\item{absolute}{logical, print absolute pitches (unavailable in current
package version).}

\item{quantize}{integer, duration, quantize notes on duration.}

\item{explicit}{logical, print explicit durations.}

\item{start_quant}{integer, duration, quantize note starts on the duration.}

\item{allow_tuplet}{character vector, allow tuplet durations. See details.}

\item{details}{logical, print additional information to console.}

\item{lyric}{logical, treat all text as lyrics.}
}
\value{
nothing returned; a file is written.
}
\description{
Convert a MIDI file (\code{.mid}) to a LilyPond format (\code{.ly}) text file.
}
\details{
Under development/testing. See warning and details below.

This function is a wrapper around the \code{midi2ly()} command line utility
provided by LilyPond. It inherits all the limitations thereof.
LilyPond is not intended to be used to produce meaningful sheet music from
arbitrary MIDI files.
While \code{\link[=lilypond]{lilypond()}} converts R code \code{score()} objects to LilyPond markup
directly, MIDI conversion to LilyPond markup by \code{midily()} requires LilyPond.

WARNING: Even though the purpose of the command line utility is to convert
an existing MIDI file to a LilyPond file, it nevertheless generates a
LilyPond file that \emph{specifies inclusion of MIDI output}.
This means when you subsequently process the LilyPond file with LilyPond or
if you use \code{miditab()} to go straight from your MIDI file to pdf output,
the command line tool will also produce a MIDI file output. It will
overwrite your original MIDI file if it has the same file name and location!

\code{allow_tuplets = NULL} to disallow all tuplets. Fourth, eighth and sixteenth
note triplets are allowed. The format is a character vector where each
element is \code{duration*numerator/denominator}, no spaces. See default argument.

On Windows systems, it may be necessary to specify a path in \code{\link[=tabr_options]{tabr_options()}}
to both \code{midi2ly} and \code{python} if they are not already added to the system
PATH variable.
}
\examples{
\dontrun{
if(tabr_options()$midi2ly != ""){
  midi <- system.file("example.mid", package = "tabr")
  outfile <- file.path(tempdir(), "out.ly")
  midily(midi, outfile) # requires LilyPond installation
}
}
}
\seealso{
\code{\link[=miditab]{miditab()}}, \code{\link[=tab]{tab()}}, \code{\link[=lilypond]{lilypond()}}
}
